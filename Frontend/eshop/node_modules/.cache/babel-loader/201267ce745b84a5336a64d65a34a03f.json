{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alexandre Brosseau\\\\Desktop\\\\drf_react_eshop\\\\eshop\\\\src\\\\components\\\\Payment\\\\payment.js\";\nimport { Router } from \"react-router-dom\";\nimport { CardElement } from '@stripe/react-stripe-js';\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Payment = () => {\n  var _s = $RefreshSig$();\n\n  const CheckoutForm = () => {\n    _s();\n\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmPayment({\n        //`Elements` instance that was used to create the Payment Element\n        elements,\n        confirmParams: {\n          return_url: \"https://example.com/order/123/complete\"\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (for example, payment details incomplete)\n        console.log(result.error.message);\n      } else {// Your customer will be redirected to your `return_url`. For some payment\n        // methods like iDEAL, your customer will be redirected to an intermediate\n        // site first to authorize the payment, then redirected to the `return_url`.\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !stripe,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  };\n\n  _s(CheckoutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n    return [useStripe, useElements];\n  });\n};\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["Router","CardElement","Elements","useStripe","useElements","PaymentElement","Payment","CheckoutForm","stripe","elements","handleSubmit","event","preventDefault","result","confirmPayment","confirmParams","return_url","error","console","log","message"],"sources":["C:/Users/Alexandre Brosseau/Desktop/drf_react_eshop/eshop/src/components/Payment/payment.js"],"sourcesContent":["import { Router } from \"react-router-dom\";\r\nimport {CardElement} from '@stripe/react-stripe-js'\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';\r\nconst Payment = () => {\r\n   \r\n\r\n    const CheckoutForm = () => {\r\n      const stripe = useStripe();\r\n      const elements = useElements();\r\n    \r\n      const handleSubmit = async (event) => {\r\n        // We don't want to let default form submission happen here,\r\n        // which would refresh the page.\r\n        event.preventDefault();\r\n    \r\n        if (!stripe || !elements) {\r\n          // Stripe.js has not yet loaded.\r\n          // Make sure to disable form submission until Stripe.js has loaded.\r\n          return;\r\n        }\r\n    \r\n        const result = await stripe.confirmPayment({\r\n          //`Elements` instance that was used to create the Payment Element\r\n          elements,\r\n          confirmParams: {\r\n            return_url: \"https://example.com/order/123/complete\",\r\n          },\r\n        });\r\n    \r\n        if (result.error) {\r\n          // Show error to your customer (for example, payment details incomplete)\r\n          console.log(result.error.message);\r\n        } else {\r\n          // Your customer will be redirected to your `return_url`. For some payment\r\n          // methods like iDEAL, your customer will be redirected to an intermediate\r\n          // site first to authorize the payment, then redirected to the `return_url`.\r\n        }\r\n      };\r\n    \r\n      return (\r\n        <form onSubmit={handleSubmit}>\r\n          <PaymentElement />\r\n          <button disabled={!stripe}>Submit</button>\r\n        </form>\r\n      )\r\n    }\r\n}\r\n export default Payment;"],"mappings":";AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,cAAhC,QAAqD,yBAArD;;;AACA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAGlB,MAAMC,YAAY,GAAG,MAAM;IAAA;;IACzB,MAAMC,MAAM,GAAGL,SAAS,EAAxB;IACA,MAAMM,QAAQ,GAAGL,WAAW,EAA5B;;IAEA,MAAMM,YAAY,GAAG,MAAOC,KAAP,IAAiB;MACpC;MACA;MACAA,KAAK,CAACC,cAAN;;MAEA,IAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;QACxB;QACA;QACA;MACD;;MAED,MAAMI,MAAM,GAAG,MAAML,MAAM,CAACM,cAAP,CAAsB;QACzC;QACAL,QAFyC;QAGzCM,aAAa,EAAE;UACbC,UAAU,EAAE;QADC;MAH0B,CAAtB,CAArB;;MAQA,IAAIH,MAAM,CAACI,KAAX,EAAkB;QAChB;QACAC,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACI,KAAP,CAAaG,OAAzB;MACD,CAHD,MAGO,CACL;QACA;QACA;MACD;IACF,CA3BD;;IA6BA,oBACE;MAAM,QAAQ,EAAEV,YAAhB;MAAA,wBACE,QAAC,cAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAQ,QAAQ,EAAE,CAACF,MAAnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAMD,CAvCD;;EAHkB,GAGZD,YAHY;IAAA,QAIDJ,SAJC,EAKCC,WALD;EAAA;AA2CrB,CA3CD;;KAAME,O;AA4CL,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}
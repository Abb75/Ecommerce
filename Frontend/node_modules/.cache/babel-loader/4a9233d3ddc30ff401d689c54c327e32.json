{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alexandre Brosseau\\\\Desktop\\\\drf_react_eshop\\\\eshop\\\\src\\\\components\\\\Payment\\\\payment.js\",\n    _s = $RefreshSig$();\n\nimport { Router } from \"react-router-dom\";\nimport { CardElement } from '@stripe/react-stripe-js';\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Payment = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"https://example.com/order/123/complete\"\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {// Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Payment, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["Router","CardElement","Elements","useStripe","useElements","PaymentElement","Payment","stripe","elements","handleSubmit","event","preventDefault","result","confirmPayment","confirmParams","return_url","error","console","log","message"],"sources":["C:/Users/Alexandre Brosseau/Desktop/drf_react_eshop/eshop/src/components/Payment/payment.js"],"sourcesContent":["import { Router } from \"react-router-dom\";\r\nimport {CardElement} from '@stripe/react-stripe-js'\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';\r\nconst Payment = () => {\r\n   \r\n      const stripe = useStripe();\r\n      const elements = useElements();\r\n    \r\n      const handleSubmit = async (event) => {\r\n        // We don't want to let default form submission happen here,\r\n        // which would refresh the page.\r\n        event.preventDefault();\r\n    \r\n        if (!stripe || !elements) {\r\n          // Stripe.js has not yet loaded.\r\n          // Make sure to disable form submission until Stripe.js has loaded.\r\n          return;\r\n        }\r\n    \r\n        const result = await stripe.confirmPayment({\r\n          //`Elements` instance that was used to create the Payment Element\r\n          elements,\r\n          confirmParams: {\r\n            return_url: \"https://example.com/order/123/complete\",\r\n          },\r\n        });\r\n    \r\n        if (result.error) {\r\n          // Show error to your customer (for example, payment details incomplete)\r\n          console.log(result.error.message);\r\n        } else {\r\n          // Your customer will be redirected to your `return_url`. For some payment\r\n          // methods like iDEAL, your customer will be redirected to an intermediate\r\n          // site first to authorize the payment, then redirected to the `return_url`.\r\n        }\r\n      };\r\n    \r\n      return (\r\n        <form onSubmit={handleSubmit}>\r\n          <PaymentElement />\r\n          <button disabled={!stripe}>Submit</button>\r\n        </form>\r\n      )\r\n    }\r\n\r\n export default Payment;"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,cAAhC,QAAqD,yBAArD;;;AACA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAEhB,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;EACA,MAAMK,QAAQ,GAAGJ,WAAW,EAA5B;;EAEA,MAAMK,YAAY,GAAG,MAAOC,KAAP,IAAiB;IACpC;IACA;IACAA,KAAK,CAACC,cAAN;;IAEA,IAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;MACxB;MACA;MACA;IACD;;IAED,MAAMI,MAAM,GAAG,MAAML,MAAM,CAACM,cAAP,CAAsB;MACzC;MACAL,QAFyC;MAGzCM,aAAa,EAAE;QACbC,UAAU,EAAE;MADC;IAH0B,CAAtB,CAArB;;IAQA,IAAIH,MAAM,CAACI,KAAX,EAAkB;MAChB;MACAC,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACI,KAAP,CAAaG,OAAzB;IACD,CAHD,MAGO,CACL;MACA;MACA;IACD;EACF,CA3BD;;EA6BA,oBACE;IAAM,QAAQ,EAAEV,YAAhB;IAAA,wBACE,QAAC,cAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAQ,QAAQ,EAAE,CAACF,MAAnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CAxCL;;GAAMD,O;UAEeH,S,EACEC,W;;;KAHjBE,O;AA0CL,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}